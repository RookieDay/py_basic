#!/usr/bin/env python3
# -*- coding: utf-8 -*-


# 要做更精确地匹配，可以用[]表示范围，比如：

# [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；

# [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；

# [a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；

# [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。

# A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。

# ^表示行的开头，^\d表示必须以数字开头。

# $表示行的结束，\d$表示必须以数字结束。

# 你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。



import re
re.match(r'^(\d+)(0*)$','102300')

m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
# >>> m
# <_sre.SRE_Match object; span=(0, 9), match='010-12345'>
# >>> m.group(0)
# '010-12345'
# >>> m.group(1)
# '010'
# >>> m.group(2)
# '12345'
# group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串

# 编译
# 当我们在Python中使用正则表达式时，re模块内部会干两件事情：

# 编译正则表达式，如果正则表达式的字符串本身不合法，会报错；

# 用编译后的正则表达式去匹配字符串。

# 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：

# >>> import re
# # 编译:
# >>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# # 使用：
# >>> re_telephone.match('010-12345').groups()
# ('010', '12345')
# >>> re_telephone.match('010-8086').groups()
# ('010', '8086')
# 编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。